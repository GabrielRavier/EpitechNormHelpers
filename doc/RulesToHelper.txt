O- Files organization
O1: Contents of the delivery folder: Will do this later, maybe premade .gitignore to help and/or a script that checks the content of the git repo itself. Can use libgit2 for this
O2: File extensions: Might be able to make script for this, will see later
O3: File coherence: Will need custom thingy
O4: Naming files and folders: Could possibly flag short filenames, easy to flag non-snake_case though

G- Global scope
G1: File header: Easy to flag for
G2: Seperation of functions: Easy to flag for
G3: Indentation of pre-processor directives: Will probably need custom check, shouldn't be too hard to make though
G4: Global variables: clang-tidy: cppcoreguidelines-avoid-magic-numbers, cppcoreguidelines-avoid-non-const-global-variables
G5: Static: gcc/clang: -Wmissing-prototypes and clang-tidy: clang-diagnostic-missing-prototypes

F- Functions
F1: Coherence of functions: Probably can't be done automatically
F2: Naming functions: For the verb part, could do such a check but it would probably be in some strident category. Checking for snake_case should be easy enough
F3: Number of columns: Easy to check, be sure to use the size of tabs that Epitech specifies (probably ask). clang-format should help
F4: Number of lines: Add strident check for >20 lines functions
F5: Arguments: For no parameters void check : gcc: -Wstrict-prototypes. For struct check, need something custom
F6: Comments inside a function: Should be easy enough to check manually with a greppy check (i.e. check for `[ \t]/[/*]`)
F7: Nested function: Should be easy enough to find, just compile with clang. Otherwise, use -Wpedantic

L- Layout inside a function scope
L1: Code line content: Some manual checks, clang-format should help
L2: Indentation: clang-format
L3: Spaces: Should be doable with clang-format
L4: Curly brackets: Should be doable with clang-format
L5: Variable declaration: Probably requires manual check, or maybe just using ANSI C
L6: Line jumps: May need custom check, might be doable with clang-format

V- Variables and types
V1: Naming identifiers: Probably requires manual check
V2: Structures: Probably requires manual check
V3: Pointers: clang-format can do it most likely

C- Control structures
C1: Conditional branching: Probably requires manual check
C2: Ternary: Probably requires manual check
C3: Goto: Probably requires manual check

A- Advanced
A1: Constant pointers: clang-tidy: readability-non-const-parameter
A2: Typing: Probably can't really be done automatically

H- Header files
H1: Content: Probably requires manual check
H2: Include guard: Can probably be done with some tool
H3: Macros: May require manual check


Notes:
- May want to take a look at linux .clang-format to figure out a few rules
